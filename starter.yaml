
########
# To setup quay
#
# ansible-playbook starter.yaml
#
- hosts: localhost
  tasks:
  - name: Check for Project 'quay-enterprise'
    command: oc get projects -o jsonpath='{.items[?(.metadata.name=="quay-enterprise")].metadata.name}'
    register: result
  - name: Create project 'quay-enterprise' if doesn't exist
    command: oc new-project quay-enterprise
    when: result.stdout != "quay-enterprise"

  - name: Check for Secret 'quay-enterprise-config-secret'
    command: oc get secrets -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="quay-enterprise-config-secret")].metadata.name}'
    register: result
  - name: Create Secret 'quay-enterprise-config-secret'
    when: result.stdout != "quay-enterprise-config-secret"
    shell:
      cmd: |
        cat <<EOF | oc create -n quay-enterprise -f -
        apiVersion: v1
        kind: Secret
        metadata:
          name: quay-enterprise-config-secret
        EOF

  - name: Check for Secret 'quay-pull-secret'
    command: oc get secrets -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="quay-pull-secret")].metadata.name}'
    register: result
  - name: Create Secret 'quay-pull-secret'
    when: result.stdout != "quay-pull-secret"
    shell:
      cmd: |
        oc create secret generic quay-pull-secret --from-file=.dockerconfigjson=/home/thomasmckay/.docker/config.json --type=kubernetes.io/dockerconfigjson -n quay-enterprise
        oc secrets link default quay-pull-secret --for=pull -n quay-enterprise
        oc secrets link deployer quay-pull-secret -n quay-enterprise

  - name: Check for 'quay:rhel7' image
    shell:
      cmd: oc get images -n quay-enterprise -o jsonpath='{.items[*].dockerImageReference}' | grep quay.io/thomasmckay/quay
    ignore_errors: yes
    register: result
  - name: Import image 'quay:rhel7'
    when: result is failure
    command: oc import-image quay:rhel7 --from=quay.io/thomasmckay/quay:rhel7 -n quay-enterprise --confirm

  - name: Check for Deployment 'quay-registry'
    command: oc get deployments -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="quay-registry")].metadata.name}'
    register: result
  - name: Create Deployment 'quay-enterprise'
    when: result.stdout != "quay-registry"
    shell:
      cmd: |
        cat <<EOF | oc apply -n quay-enterprise -f -
        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          namespace: quay-enterprise
          name: quay-registry
          labels:
            quay-enterprise-component: app
        spec:
          replicas: 1
          selector:
            matchLabels:
              quay-enterprise-component: app
          template:
            metadata:
              namespace: quay-enterprise
              labels:
                quay-enterprise-component: app
            spec:
              volumes:
                - name: configvolume
                  secret:
                    secretName: quay-enterprise-config-secret
              containers:
              - name: quay-enterprise
                image: quay.io/thomasmckay/quay:rhel7
                imagePullPolicy: Always
                ports:
                - containerPort: 80
                  protocol: TCP
                - containerPort: 443
                  protocol: TCP
                volumeMounts:
                - name: configvolume
                  readOnly: false
                  mountPath: /conf/stack
              imagePullSecrets:
                - name: quay-pull-secret
        EOF

  - name: Check for Service 'quay-registry'
    command: oc get services -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="quay-registry")].metadata.name}'
    register: result
  - name: Create Service 'quay-registry'
    when: result.stdout != "quay-registry"
    shell:
      cmd: |
        cat <<EOF | oc apply -n quay-enterprise -f -
        apiVersion: v1
        kind: Service
        metadata:
          namespace: quay-enterprise
          name: quay-registry
        spec:
          ports:
            - name: http
              protocol: TCP
              port: 80
              targetPort: 8080
            - name: https
              protocol: TCP
              port: 443
              targetPort: 8443
          selector:
            quay-enterprise-component: app
        EOF

  - name: Check for Route 'quay-registry'
    command: oc get routes -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="quay-registry")].metadata.name}'
    register: result
  - name: Create Route 'quay-registry'
    when: result.stdout != "quay-registry"
    shell:
      cmd: |
        cat <<EOF | oc apply -n quay-enterprise -f -
        apiVersion: route.openshift.io/v1
        kind: Route
        metadata:
          labels:
            quay-enterprise-component: app
          name: quay-registry
          namespace: quay-enterprise
        spec:
          port:
            targetPort: https
          tls:
            insecureEdgeTerminationPolicy: Redirect
            termination: passthrough
          to:
            kind: Service
            name: quay-registry
            weight: 100
          wildcardPolicy: None
        EOF


  - name: Check for Deployment 'quay-config'
    command: oc get deployments -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="quay-config")].metadata.name}'
    register: result
  - name: Create Deployment 'quay-enterprise'
    when: result.stdout != "quay-config"
    shell:
      cmd: |
        cat <<EOF | oc apply -n quay-enterprise -f -
        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          namespace: quay-enterprise
          name: quay-config
          labels:
            quay-enterprise-component: app
        spec:
          replicas: 1
          selector:
            matchLabels:
              quay-enterprise-component: app
          template:
            metadata:
              namespace: quay-enterprise
              labels:
                quay-enterprise-component: app
            spec:
              volumes:
                - name: configvolume
                  secret:
                    secretName: quay-enterprise-config-secret
              containers:
              - name: quay-enterprise
                image: quay.io/thomasmckay/quay:rhel7
                imagePullPolicy: Always
                args:
                - config
                ports:
                - containerPort: 80
                  protocol: TCP
                - containerPort: 443
                  protocol: TCP
                volumeMounts:
                - name: configvolume
                  readOnly: false
                  mountPath: /conf/stack
              imagePullSecrets:
                - name: quay-pull-secret
        EOF

  - name: Check for Service 'quay-config'
    command: oc get services -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="quay-config")].metadata.name}'
    register: result
  - name: Create Service 'quay-config'
    when: result.stdout != "quay-config"
    shell:
      cmd: |
        cat <<EOF | oc apply -n quay-enterprise -f -
        apiVersion: v1
        kind: Service
        metadata:
          namespace: quay-enterprise
          name: quay-config
        spec:
          ports:
            - name: http
              protocol: TCP
              port: 80
              targetPort: 8080
            - name: https
              protocol: TCP
              port: 443
              targetPort: 8443
          selector:
            quay-enterprise-component: app
        EOF

  - name: Check for Route 'quay-config'
    command: oc get routes -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="quay-config")].metadata.name}'
    register: result
  - name: Create Route 'quay-config'
    when: result.stdout != "quay-config"
    shell:
      cmd: |
        cat <<EOF | oc apply -n quay-enterprise -f -
        apiVersion: route.openshift.io/v1
        kind: Route
        metadata:
          labels:
            quay-enterprise-component: app
          name: quay-config
          namespace: quay-enterprise
        spec:
          port:
            targetPort: https
          tls:
            insecureEdgeTerminationPolicy: Redirect
            termination: passthrough
          to:
            kind: Service
            name: quay-config
            weight: 100
          wildcardPolicy: None
        EOF