---
- name: Check for Secret 'quay-enterprise-cert-secret'
  command: oc get secrets -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="quay-enterprise-cert-secret")].metadata.name}'
  register: result

- name: Create TLS cert and key
  when: result.stdout != "quay-enterprise-cert-secret"
  shell:
    cmd: |
      openssl genrsa -out tmp/rootCA.key 2048
      openssl req -x509 -new -nodes -key tmp/rootCA.key -sha256 -days 1024 -out tmp/rootCA.pem -subj '/CN=*.`minishift ip`.nip.io'

      cat <<EOF > tmp/openssl.conf
      [req]
      req_extensions = v3_req
      distinguished_name = req_distinguished_name
      [req_distinguished_name]
      [ v3_req ]
      basicConstraints = CA:FALSE
      keyUsage = nonRepudiation, digitalSignature, keyEncipherment
      subjectAltName = @alt_names
      [alt_names]
      DNS.1 = *.`minishift ip`.nip.io
      IP.1 = `minishift ip`
      EOF

      openssl genrsa -out tmp/quay.key 2048
      openssl req -new -key tmp/quay.key -out tmp/quay.csr -subj "/CN=*.`minishift ip`.nip.io" -config tmp/openssl.conf
      openssl x509 -req -in tmp/quay.csr -CA tmp/rootCA.pem -CAkey tmp/rootCA.key -CAcreateserial -out tmp/quay.cert -days 356 -extensions v3_req -extfile tmp/openssl.conf

      openssl genrsa -out tmp/clair.key 2048
      openssl req -new -key tmp/clair.key -out tmp/clair.csr -subj "/CN=*.`minishift ip`.nip.io" -config tmp/openssl.conf
      openssl x509 -req -in tmp/clair.csr -CA tmp/rootCA.pem -CAkey tmp/rootCA.key -CAcreateserial -out tmp/clair.cert -days 356 -extensions v3_req -extfile tmp/openssl.conf

# Quay
#
- name: Create Quay server cert
  when: result.stdout != "quay-enterprise-cert-secret"
  shell:
    cmd: |
      oc adm ca create-server-cert \
        --signer-cert=tmp/minishift.crt \
        --signer-key=tmp/minishift.key \
        --signer-serial=tmp/minishift.serial.txt \
        --hostnames="`oc get services -n quay-enterprise -o jsonpath='{.items[?(@.metadata.name==\"quay-registry\")].spec.clusterIP}'`,`oc get routes -n quay-enterprise -o jsonpath='{.items[?(@.metadata.name==\"quay-registry\")].spec.host}'`,`oc get services -n quay-enterprise -o jsonpath='{.items[?(@.metadata.name==\"quay-config\")].spec.clusterIP}'`,`oc get routes -n quay-enterprise -o jsonpath='{.items[?(@.metadata.name==\"quay-config\")].spec.host}'`" \
        --cert=tmp/quay.cert \
        --key=tmp/quay.key
- name: Create secret 'quay-enterprise-cert-secret'
  when: result.stdout != "quay-enterprise-cert-secret"
  shell:
    cmd: |
      oc create secret generic quay-enterprise-cert-secret \
         --from-file=ssl.cert=tmp/quay.cert --from-file=ssl.key=tmp/quay.key -n quay-enterprise

# Clair
#
- name: Check for Secret 'clair-cert-secret'
  command: oc get secrets -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="clair-cert-secret")].metadata.name}'
  register: result
# - name: Create Clair server cert
#   when: result.stdout != "clair-cert-secret"
#   shell:
#     cmd: |
#       oc adm ca create-server-cert \
#         --signer-cert=tmp/minishift.crt \
#         --signer-key=tmp/minishift.key \
#         --signer-serial=tmp/minishift.serial.txt \
#         --hostnames="`oc get services -n quay-enterprise -o jsonpath=`oc get services -n clair -o jsonpath='{.items[?(@.metadata.name==\"clair\")].spec.clusterIP}'`" \
#         --cert=tmp/clair.cert \
#         --key=tmp/clair.key
- name: Create secret 'clair-cert-secret'
  when: result.stdout != "clair-cert-secret"
  shell:
    cmd: |
      oc create secret generic clair-cert-secret \
         --from-file=ssl.cert=tmp/clair.cert --from-file=ssl.key=tmp/clair.key -n quay-enterprise
