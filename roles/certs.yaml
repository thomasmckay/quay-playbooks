---
- name: Check for Secret 'quay-enterprise-cert-secret'
  command: oc get secrets -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="quay-enterprise-cert-secret")].metadata.name}'
  register: result

- name: Create TLS cert and key
  when: result.stdout != "quay-enterprise-cert-secret"
  vars:
    tmpdir: /home/thomasmckay/code/operators/quay-operator/playbooks/tmp
  shell:
    cmd: |
      # Root CA
      openssl genrsa -out {{ tmpdir }}/rootCA.key 4096
      openssl req -x509 -new -nodes -key {{ tmpdir }}/rootCA.key -sha256 -days 365 \
          -out {{ tmpdir }}/rootCA.crt -subj '/CN=Quay'

      # Quay server
      openssl genrsa -out {{ tmpdir }}/quay.key 4096
      openssl req -new -key {{ tmpdir }}/quay.key -out {{ tmpdir }}/quay.csr \
          -subj "/C=US/ST=New York/L=Cazenovia/O=Red Hat/OU=Quay/emailAddress=thomasmckay@redhat.com/CN=*.`minishift ip`.nip.io"
      openssl x509 -req -days 365 -in {{ tmpdir }}/quay.csr -out {{ tmpdir }}/quay.crt \
          -CA {{ tmpdir }}/rootCA.crt -CAkey {{ tmpdir }}/rootCA.key -CAcreateserial

      # Clair server
      openssl genrsa -out {{ tmpdir }}/clair.key 4096
      openssl req -new -key {{ tmpdir }}/clair.key -out {{ tmpdir }}/clair.csr \
          -subj "/C=US/ST=New York/L=Cazenovia/O=Red Hat/OU=Quay/emailAddress=thomasmckay@redhat.com/CN=*.`minishift ip`.nip.io"
      openssl x509 -req -days 365 -in {{ tmpdir }}/clair.csr -out {{ tmpdir }}/clair.crt \
          -CA {{ tmpdir }}/rootCA.crt -CAkey {{ tmpdir }}/rootCA.key -CAcreateserial

# Quay
#
# - name: Create Quay server cert
#   vars:
#     tmpdir: /home/thomasmckay/code/operators/quay-operator/playbooks/tmp
#   when: result.stdout != "quay-enterprise-cert-secret"
#   shell:
#     cmd: |
#       oc adm ca create-server-cert \
#         --signer-cert={{ tmpdir }}/rootCA.crt \
#         --signer-key={{ tmpdir }}/rootCA.key \
#         --signer-serial={{ tmpdir }}/rootCA.srl \
#         --hostnames="`oc get services -n quay-enterprise -o jsonpath='{.items[?(@.metadata.name==\"quay-registry\")].spec.clusterIP}'`,`oc get routes -n quay-enterprise -o jsonpath='{.items[?(@.metadata.name==\"quay-registry\")].spec.host}'`,`oc get services -n quay-enterprise -o jsonpath='{.items[?(@.metadata.name==\"quay-config\")].spec.clusterIP}'`,`oc get routes -n quay-enterprise -o jsonpath='{.items[?(@.metadata.name==\"quay-config\")].spec.host}'`" \
#         --cert={{ tmpdir }}/quay.crt \
#         --key={{ tmpdir }}/quay.key
- name: Create secret 'quay-enterprise-cert-secret'
  when: result.stdout != "quay-enterprise-cert-secret"
  shell:
    cmd: |
      oc create secret generic quay-enterprise-cert-secret \
         --from-file=ssl.cert={{ tmpdir }}/quay.crt --from-file=ssl.key={{ tmpdir }}/quay.key -n quay-enterprise

# Clair
#
- name: Check for Secret 'clair-cert-secret'
  vars:
    tmpdir: /home/thomasmckay/code/operators/quay-operator/playbooks/tmp
  command: oc get secrets -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="clair-cert-secret")].metadata.name}'
  register: result
# - name: Create Clair server cert
#   when: result.stdout != "clair-cert-secret"
#   shell:
#     cmd: |
#       oc adm ca create-server-cert \
#         --signer-cert={{ tmpdir }}/rootCA.crt \
#         --signer-key={{ tmpdir }}/rootCA.key \
#         --signer-serial={{ tmpdir }}/rootCA.crl \
#         --hostnames="`oc get services -n quay-enterprise -o jsonpath=`oc get services -n clair -o jsonpath='{.items[?(@.metadata.name==\"clair\")].spec.clusterIP}'`" \
#         --cert={{ tmpdir }}/clair.crt \
#         --key={{ tmpdir }}/clair.key
- name: Create secret 'clair-cert-secret'
  vars:
    tmpdir: /home/thomasmckay/code/operators/quay-operator/playbooks/tmp
  when: result.stdout != "clair-cert-secret"
  shell:
    cmd: |
      oc create secret generic clair-cert-secret \
         --from-file=ssl.cert={{ tmpdir }}/clair.crt --from-file=ssl.key={{ tmpdir }}/clair.key -n quay-enterprise
