# To setup quay on minishift
#
# ansible-playbook --private-key=~/.minishift/machines/minishift/id_rsa --u docker -i `minishift ip`, playbooks/quay-minishift.yaml
#
- hosts: all
  become: true
  tasks:
    - include: ../roles/minishift-volumes.yaml

- hosts: localhost
  vars:
    namespace: quay-enterprise
  tasks:
    - include: ../roles/minishift-namespace.yaml
    - include: ../roles/minishift-persistent-volume.yaml
      vars:
        name: "{{ item }}"
      loop:
        - quay-postgres
        - quay-redis
        - clair-postgres
    - include: ../roles/minishift-redis.yaml
      vars:
        name: quay-redis
    - include: ../roles/minishift-postgres.yaml
      vars:
        name: quay-postgres
        user: quay
        password: quay
        database: quay
    - include: ../roles/minishift-postgres.yaml
      vars:
        name: clair-postgres
        user: clair
        password: clair
        database: clair

    - name: Check for Secret 'quay-enterprise-config-secret'
      command: oc get secrets -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="quay-enterprise-config-secret")].metadata.name}'
      register: result
    - name: Create Secret 'quay-enterprise-config-secret'
      when: result.stdout != "quay-enterprise-config-secret"
      shell:
        cmd: |
          cat <<EOF | oc create -n quay-enterprise -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: quay-enterprise-config-secret
          EOF

    - include: ../roles/certs.yaml

    - name: Check for Secret 'quay-pull-secret'
      command: oc get secrets -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="quay-pull-secret")].metadata.name}'
      register: result
    - name: Create Secret 'quay-pull-secret'
      when: result.stdout != "quay-pull-secret"
      shell:
        cmd: |
          oc create secret generic quay-pull-secret --from-file=.dockerconfigjson=/home/thomasmckay/.docker/config.json --type=kubernetes.io/dockerconfigjson -n quay-enterprise
          oc secrets link default quay-pull-secret --for=pull -n quay-enterprise
          oc secrets link deployer quay-pull-secret -n quay-enterprise

    - name: Check for 'quay:rhel7' image
      shell:
        cmd: oc get images -n quay-enterprise -o jsonpath='{.items[*].dockerImageReference}' | grep quay.io/thomasmckay/quay
      ignore_errors: yes
      register: result
    - name: Import image 'quay:rhel7'
      when: result is failure
      command: oc import-image quay:v3.0.0 --from=quay.io/redhat/quay:v3.0.0 -n quay-enterprise --confirm

    - name: Check for Role 'quay-enterprise-serviceaccount'
      command: oc get roles -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="quay-enterprise-serviceaccount")].metadata.name}'
      register: result
    - name: Create Role 'quay-enterprise-serviceaccount'
      when: result.stdout != "quay-enterprise-serviceaccount"
      shell:
        cmd: |
          cat <<EOF | oc apply -n quay-enterprise -f -
          apiVersion: v1
          kind: Role
          metadata:
            name: quay-enterprise-serviceaccount
            namespace: quay-enterprise
          rules:
          - apiGroups:
            - ""
            resources:
            - secrets
            verbs:
            - get
            # TODO: below don't work openshift online
            - put
            - patch
            - update
          - apiGroups:
            - ""
            resources:
            - namespaces
            verbs:
            - get
          - apiGroups:
            - extensions
            - apps
            resources:
            - deployments
            verbs:
            - get
            - list
            - patch
            - update
            - watch
          EOF
    - name: Check for RoleBinding 'quay-enterprise'
      command: oc get roles -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="quay-enterprise-serviceaccount")].metadata.name}'
      register: result
    - name: Create RoleBinding 'quay-enterprise'
      when: result.stdout != "quay-enterprise"
      shell:
        cmd: |
          cat <<EOF | oc apply -n quay-enterprise -f -
          apiVersion: rbac.authorization.k8s.io/v1beta1
          kind: RoleBinding
          metadata:
            name: quay-enterprise-secret-writer
            namespace: quay-enterprise
          roleRef:
            #apiGroup: rbac.authorization.k8s.io
            kind: Role
            name: quay-enterprise-serviceaccount
          subjects:
          - kind: ServiceAccount
            name: default
          EOF

    - name: Check for Deployment 'quay-registry'
      command: oc get deployments -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="quay-registry")].metadata.name}'
      register: result
    - name: Create Deployment 'quay-registry'
      when: result.stdout != "quay-registry"
      shell:
        cmd: |
          cat <<EOF | oc apply -n quay-enterprise -f -
          apiVersion: extensions/v1beta1
          kind: Deployment
          metadata:
            namespace: quay-enterprise
            name: quay-registry
            labels:
              quay-enterprise-component: app
          spec:
            replicas: 1
            selector:
              matchLabels:
                quay-enterprise-component: app
            template:
              metadata:
                namespace: quay-enterprise
                labels:
                  quay-enterprise-component: app
              spec:
                volumes:
                  - name: configvolume
                    projected:
                      defaultMode: 0777
                      sources:
                      - secret:
                          name: quay-enterprise-config-secret
                          path: config.yaml
                      - secret:
                          name: quay-enterprise-cert-secret
                containers:
                - name: quay-enterprise
                  image: quay.io/redhat/quay:v3.0.0
                  imagePullPolicy: Always
                  env:
                    - name: QUAYENTRY
                      value: "registry"
                    - name: REDEPLOY
                      value: "1"
                  ports:
                  - containerPort: 80
                    protocol: TCP
                  - containerPort: 443
                    protocol: TCP
                  volumeMounts:
                  - name: configvolume
                    readOnly: false
                    mountPath: /conf/stack
                imagePullSecrets:
                  - name: quay-pull-secret
          EOF

    - name: Check for Service 'quay-registry'
      command: oc get services -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="quay-registry")].metadata.name}'
      register: result
    - name: Create Service 'quay-registry'
      when: result.stdout != "quay-registry"
      shell:
        cmd: |
          cat <<EOF | oc apply -n quay-enterprise -f -
          apiVersion: v1
          kind: Service
          metadata:
            namespace: quay-enterprise
            name: quay-registry
          spec:
            ports:
              - name: http
                protocol: TCP
                port: 80
                targetPort: 8080
              - name: https
                protocol: TCP
                port: 443
                targetPort: 8443
            selector:
              quay-enterprise-component: app
          EOF

    - name: Check for Route 'quay-registry'
      command: oc get routes -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="quay-registry")].metadata.name}'
      register: result
    - name: Create Route 'quay-registry'
      when: result.stdout != "quay-registry"
      shell:
        cmd: |
          cat <<EOF | oc apply -n quay-enterprise -f -
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            labels:
              quay-enterprise-component: app
            name: quay-registry
            namespace: quay-enterprise
          spec:
            port:
              targetPort: https
            tls:
              insecureEdgeTerminationPolicy: Redirect
              termination: passthrough
            to:
              kind: Service
              name: quay-registry
              weight: 100
            wildcardPolicy: None
          EOF

    - name: Check for Deployment 'quay-config'
      command: oc get deployments -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="quay-config")].metadata.name}'
      register: result
    - name: Create Deployment 'quay-config'
      when: result.stdout != "quay-config"
      shell:
        cmd: |
          cat <<EOF | oc apply -n quay-enterprise -f -
          apiVersion: extensions/v1beta1
          kind: Deployment
          metadata:
            namespace: quay-enterprise
            name: quay-config
            labels:
              quay-enterprise-component: config
          spec:
            replicas: 1
            selector:
              matchLabels:
                quay-enterprise-component: config
            template:
              metadata:
                namespace: quay-enterprise
                labels:
                  quay-enterprise-component: config
              spec:
                volumes:
                  - name: configvolume
                    projected:
                      defaultMode: 0777
                      sources:
                      - secret:
                          name: quay-enterprise-config-secret
                          path: config.yaml
                      - secret:
                          name: quay-enterprise-cert-secret
                containers:
                - name: quay-enterprise
                  image: quay.io/redhat/quay:v3.0.0
                  imagePullPolicy: Always
                  env:
                    - name: QUAYENTRY
                      value: "config"
                    - name: REDEPLOY
                      value: "1"
                    - name: CONFIG_APP_PASSWORD
                      value: "password"
                  ports:
                  - containerPort: 80
                    protocol: TCP
                  - containerPort: 443
                    protocol: TCP
                  volumeMounts:
                  - name: configvolume
                    readOnly: false
                    mountPath: /conf/stack
                imagePullSecrets:
                  - name: quay-pull-secret
          EOF

    - name: Check for Service 'quay-config'
      command: oc get services -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="quay-config")].metadata.name}'
      register: result
    - name: Create Service 'quay-config'
      when: result.stdout != "quay-config"
      shell:
        cmd: |
          cat <<EOF | oc apply -n quay-enterprise -f -
          apiVersion: v1
          kind: Service
          metadata:
            namespace: quay-enterprise
            name: quay-config
          spec:
            ports:
              - name: http
                protocol: TCP
                port: 80
                targetPort: 8080
              - name: https
                protocol: TCP
                port: 443
                targetPort: 8443
            selector:
              quay-enterprise-component: config
          EOF

    - name: Check for Route 'quay-config'
      command: oc get routes -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="quay-config")].metadata.name}'
      register: result
    - name: Create Route 'quay-config'
      when: result.stdout != "quay-config"
      shell:
        cmd: |
          cat <<EOF | oc apply -n quay-enterprise -f -
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            labels:
              quay-enterprise-component: config
            name: quay-config
            namespace: quay-enterprise
          spec:
            port:
              targetPort: https
            tls:
              insecureEdgeTerminationPolicy: Redirect
              termination: passthrough
            to:
              kind: Service
              name: quay-config
              weight: 100
            wildcardPolicy: None
          EOF

    - name: Check for Secret 'clair-config-secret'
      tags: [clair]
      command: oc get secrets -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="clair-config-secret")].metadata.name}'
      register: result
    - name: Create clair.yaml for Secret 'clair-config-secret'
      tags: [clair]
      shell:
        cmd: |
          cat <<EOF > tmp/clair.yaml
          clair:
            database:
              type: pgsql
              options:
                source: postgresql://clair:clair@clair-postgres.quay-enterprise.svc/clair?sslmode=disable
                cachesize: 16384
            api:
              healthport: 6061
              port: 6062
              timeout: 900s
              paginationkey: "XxoPtCUzrUv4JV5dS+yQ+MdW7yLEJnRMwigVY/bpgtQ="
            updater:
              interval: 6h
              enabledupdaters:
              - rhel
              - alpine
              notifier:
                attempts: 3
                renotifyinterval: 1h
                http:
                  endpoint: http://quay-registry.quay-enterprise.svc/secscan/notify
                  proxy: http://localhost:6063
          jwtproxy:
            signer_proxy:
              enabled: true
              listen_addr: :6063
              ca_key_file: /certificates/mitm.key
              ca_crt_file: /certificates/mitm.crt
              signer:
                issuer: security_scanner
                expiration_time: 5m
                max_skew: 1m
                nonce_length: 32
                private_key:
                  type: preshared
                  options:
                    key_id: e93e8d55fcf0efb22368c09e710d751eb66d7d52395e798fef83978acc52f0c2
                    #private_key_path: /config/security_scanner.pem
                    private_key_path: /etc/clair/security_scanner.pem
            verifier_proxies:
            - enabled: true
              listen_addr: :6060
              # section below for more information.
              # key_file: /config/clair.key
              # crt_file: /config/clair.crt
              verifier:
                audience: http://clair.quay-enterprise.svc:6060
                upstream: http://localhost:6062
                key_server:
                  type: keyregistry
                  options:
                    registry: http://quay-registry.quay-enterprise.svc/keys/
          EOF
    - name: Create secret 'clair-config-secret'
      tags: [clair]
      when: result.stdout != "clair-config-secret"
      shell:
        cmd: |
          oc create secret generic clair-config-secret \
             --from-file=config.yaml=tmp/clair.yaml -n quay-enterprise
    - name: Update secret 'clair-config-secret'
      tags: [clair]
      when: result.stdout == "clair-config-secret"
      shell:
        cmd: |
          oc create secret generic clair-config-secret \
             --from-file=config.yaml=tmp/clair.yaml -n quay-enterprise \
             --dry-run -o yaml | oc replace -f -

    - name: Check for Deployment 'clair'
      tags: [clair]
      command: oc get deployments -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="clair")].metadata.name}'
      register: result
    - name: Create or update Deployment 'clair'
      tags: [clair]
      shell:
        cmd: |
          cat <<EOF | oc apply -n quay-enterprise -f -
          apiVersion: extensions/v1beta1
          kind: Deployment
          metadata:
            namespace: quay-enterprise
            name: clair
            labels:
              quay-enterprise-component: clair
          spec:
            replicas: 1
            selector:
              matchLabels:
                quay-enterprise-component: clair
            template:
              metadata:
                namespace: quay-enterprise
                labels:
                  quay-enterprise-component: clair
              spec:
                volumes:
                  - name: configvolume
                    projected:
                      sources:
                      - secret:
                          name: clair-config-secret
                          path: config.yaml
                      - secret:
                          name: clair-cert-secret
                containers:
                - name: quay-enterprise
                  #image: quay.io/thomasmckay/clair:rhel7
                  image: quay.io/redhat/clair-jwt:v3.0.0
                  imagePullPolicy: Always
                  ports:
                  - containerPort: 6060
                    protocol: TCP
                  - containerPort: 6061
                    protocol: TCP
                  volumeMounts:
                  - name: configvolume
                    readOnly: false
                    # mountPath: /config
                    mountPath: /etc/clair
                imagePullSecrets:
                  - name: quay-pull-secret
          EOF

    - name: Check for Service 'clair'
      tags: [clair]
      command: oc get services -n quay-enterprise -o jsonpath='{.items[?(.metadata.name=="clair")].metadata.name}'
      register: result
    - name: Create Service 'clair'
      when: result.stdout != "clair"
      shell:
        cmd: |
          cat <<EOF | oc apply -n quay-enterprise -f -
          apiVersion: v1
          kind: Service
          metadata:
            namespace: quay-enterprise
            name: clair
          spec:
            ports:
              - name: http
                protocol: TCP
                port: 6060
                targetPort: 6060
              - name: https
                protocol: TCP
                port: 6061
                targetPort: 6061
            selector:
              quay-enterprise-component: clair
          EOF
