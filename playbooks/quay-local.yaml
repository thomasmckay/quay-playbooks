# To setup quay locally
#
# ansible-playbook --private-key=~/.minishift/machines/minishift/id_rsa --u docker -i `minishift ip`, playbooks/quay-local.yaml
#
# ansible-playbook -i "localhost," -e quay_host=thomasmckay.usersys.redhat.com -e quay_ip=192.168.1.4 -e quay_image=quay.io/thomasmckay/quay:devel playbooks/quay-local.yaml --tags teardown
#
# docker run -it --rm --network=host -v /home/thomasmckay/quay-volumes/quay-config:/conf/stack -v /home/thomasmckay/quay-volumes/quay-storage/local:/datastorage quay.io/redhat/quay:v3.1.2 registry
#
- hosts: localhost
  vars:
    quay_host: thomasmckay.usersys.redhat.com
    quay_ip: 192.168.1.119
    quay_image: quay.io/redhat/quay:v3.1.2
    clair_image: quay.io/redhat/clair-jwt:v3.1.2
    builder_image: quay.io/redhat/quay-builder:v3.1.2
    roles_dir: ../roles
    volumes_dir: /home/thomasmckay/quay-volumes
    downloads_dir: /home/thomasmckay/Downloads
    quay_http_port: 8080
    quay_https_port: 8443

  tasks:
    - name: Stop docker processes
      tags: [teardown, start-setup]
      ignore_errors: true
      shell:
        cmd: |
          docker kill quay-postgresql quay-redis quay-config quay clair grafana prometheus swagger quay-minio
    - name: Stop docker processes
      tags: [redeploy-clair]
      ignore_errors: true
      shell:
        cmd: |
          docker kill clair

    - name: Remove prior data and volume folders
      tags: [teardown, start-setup]
      command: "sudo rm -Rf {{ volumes_dir }}/{{ item }}"
      args:
        removes: "{{ volumes_dir }}/{{ item }}"
      with_items:
        - quay-redis
        - quay-postgresql
        - quay-storage
        - quay-config
        - clair-config
        - quay-builder
        - certs
        - prometheus

    - name: Create volume folders
      tags: [start-setup]
      file:
        path: "{{ volumes_dir }}/{{ item }}"
        state: directory
      with_items:
        - quay-redis
        - quay-postgresql
        - quay-storage/local
        - quay-storage/minio
        - quay-config
        - clair-config
        - quay-builder
        - certs
        - prometheus

    - name: Remove old Downloads
      tags: [start-setup]
      file:
        path: "{{ downloads_dir }}/{{ item }}"
        state: absent
      with_items:
        - quay-config.tar.gz
        - security_scanner.pem

    - name: Create TLS cert and key
      tags: [start-setup]
      shell:
        cmd: |
          # Root CA
          openssl genrsa -out {{ volumes_dir }}/certs/rootCA.key 4096
          openssl req -new -x509 -key {{ volumes_dir }}/certs/rootCA.key -out {{ volumes_dir }}/certs/rootCA.crt \
              -days 365 -extensions v3_ca -subj "/C=US/L=Syracuse/CN=Quay"
          cat {{ volumes_dir }}/certs/rootCA.key {{ volumes_dir }}/certs/rootCA.crt | \
              tee {{ volumes_dir }}/certs/rootCA.pem

          # Quay server
          openssl genrsa -out {{ volumes_dir }}/certs/quay.key 4096
          openssl req -new -key {{ volumes_dir }}/certs/quay.key -out {{ volumes_dir }}/certs/quay.csr \
              -subj "/C=US/ST=New York/L=Cazenovia/O=Red Hat/OU=Quay/emailAddress=thomasmckay@redhat.com/CN={{ quay_host }}"
          openssl x509 -req -days 365 -in {{ volumes_dir }}/certs/quay.csr -out {{ volumes_dir }}/certs/quay.crt \
              -CA {{ volumes_dir }}/certs/rootCA.crt -CAkey {{ volumes_dir }}/certs/rootCA.key \
              -CAcreateserial -extensions v3_req -extfile /etc/pki/tls/openssl.cnf

          # Clair server
          openssl genrsa -out {{ volumes_dir }}/certs/clair.key 4096
          openssl req -new -key {{ volumes_dir }}/certs/clair.key -out {{ volumes_dir }}/certs/clair.csr \
              -subj "/C=US/ST=New York/L=Cazenovia/O=Red Hat/OU=Quay/emailAddress=thomasmckay@redhat.com/CN={{ quay_host }}"
          openssl x509 -req -days 365 -in {{ volumes_dir }}/certs/clair.csr -out {{ volumes_dir }}/certs/clair.crt \
              -CA {{ volumes_dir }}/certs/rootCA.crt -CAkey {{ volumes_dir }}/certs/rootCA.key \
              -CAcreateserial -extensions v3_req -extfile /etc/pki/tls/openssl.cnf

    - name: Install rootCA and restart docker.service
      tags: [start-setup]
      shell:
        cmd: |
          sudo cp {{ volumes_dir }}/certs/rootCA.crt /etc/pki/ca-trust/source/anchors
          sudo update-ca-trust extract
          sudo systemctl restart docker.service

    - name: Quay Postgresql container
      tags: [start-setup, restart-all, restart-postgresql]
      docker_container:
        name: quay-postgresql
        image: registry.redhat.io/rhscl/postgresql-96-rhel7:latest
        volumes:
          - "{{ volumes_dir }}/quay-postgresql:/var/lib/postgresql/data/pgdata:Z"
          #- "{{ volumes_dir }}/quay-postgresql:/var/lib/pgsql/data/userdata:Z"
        env:
          POSTGRESQL_USER: quay
          POSTGRESQL_PASSWORD: quay
          POSTGRESQL_DATABASE: quay
        ports:
          - "5432:5432"
        keep_volumes: true
        auto_remove: true
        state: started
        restart: true
        etc_hosts:
          # This does not expand the hostname that lands in /etc/hosts
          # "{{ quay_host }}": "{{ quay_ip }}"
          thomasmckay.usersys.redhat.com: 192.168.1.119
          thomasmckay-desktop.usersys.redhat.com: 192.168.1.2

    - name: Postgresql add pg_trgm extension
      tags: [start-setup, restart-all, restart-postgresql]
      shell:
        cmd: |
          docker exec quay-postgresql bash -l -c 'echo "CREATE EXTENSION pg_trgm" | psql quay'
      register: result
      until: result is succeeded
      retries: 5
      delay: 10

    - name: Quay Redis container
      tags: [start-setup, restart-all, restart-redis]
      docker_container:
        name: quay-redis
        image: registry.redhat.io/rhscl/redis-32-rhel7:latest
        volumes:
          - "{{ volumes_dir }}/quay-redis:/var/lib/redis:Z"
        ports:
          - "6379:6379"
        etc_hosts:
          thomasmckay.usersys.redhat.com: 192.168.1.119
          thomasmckay-desktop.usersys.redhat.com: 192.168.1.2
        keep_volumes: true
        auto_remove: true
        state: started

    - name: Create prometheus.yml
      tags: [start-setup, redeploy-prometheus]
      vars:
        quay_endpoint: "{{ quay_host }}:9091"
      shell:
        cmd: |
          cat <<EOF > {{ volumes_dir }}/prometheus/prometheus.yml
          global:
            scrape_interval:     15s
            evaluation_interval: 15s
          scrape_configs:
            - job_name: 'quay'
              static_configs:
                - targets: ['{{ quay_endpoint }}']
          EOF

    - name: Prometheus container
      tags: [finish-setup, restart-all, restart-prometheus, redeploy-prometheus]
      docker_container:
        name: prometheus
        image: registry.redhat.io/openshift3/prometheus:v3.11
        volumes:
          - "{{ volumes_dir }}/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:Z"
        ports:
          - "8555:9090"
        etc_hosts:
          thomasmckay.usersys.redhat.com: 192.168.1.119
          thomasmckay-desktop.usersys.redhat.com: 192.168.1.2
        keep_volumes: true
        auto_remove: true
        state: started
        restart: true

    - name: Grafana container
      tags: [finish-setup, restart-all, redeploy-prometheus, redeploy-grafana]
      docker_container:
        name: grafana
        image: registry.redhat.io/openshift3/grafana:v3.11
        user: "0:0"
        #volumes:
        #  - "{{ volumes_dir }}/prometheus:/var/lib/grafana"
        ports:
          - "8666:3000"
        etc_hosts:
          thomasmckay.usersys.redhat.com: 192.168.1.119
          thomasmckay-desktop.usersys.redhat.com: 192.168.1.2
        keep_volumes: true
        auto_remove: true
        state: started
        restart: true

    # Pre-setup required
    #     % aws configure
    #     AWS Access Key ID [None]: minioadmin
    #     AWS Secret Access Key [None]: minioadmin
    #     Default region name [None]: us-east-1
    #     Default output format [None]: ENTER
    #
    - name: "MinIO container"
      tags: [start-setup, restart-minio, restart-all]
      docker_container:
        name: quay-minio
        image: minio/minio
        command:
          - server
          - /data
        volumes:
          - "{{ volumes_dir }}/quay-storage/minio:/data"
        ports:
          - "9000:9000"
        keep_volumes: true
        auto_remove: true
        state: started
        restart: true
      register: result
      until: result is succeeded
      retries: 5
      delay: 10

    - name: MinIO config
      tags: [start-setup, restart-minio, restart-all]
      shell:
        cmd: |
          aws --endpoint-url http://{{ quay_host }}:9000 --no-verify-ssl s3 mb s3://quay-bucket-1
          aws --endpoint-url http://{{ quay_host }}:9000 --no-verify-ssl s3 mb s3://quay-bucket-2


    - name: Pull latest image
      tags: [start-setup, repull-quay]
      ignore_errors: true
      shell:
        cmd: |
          docker pull {{ quay_image }}

    - name: Quay Config container
      tags: [start-setup, restart-config]
      docker_container:
        name: quay-config
        image: "{{ quay_image }}"
        volumes:
          - "{{ volumes_dir }}/quay-config:/conf/stack"
          - "{{ volumes_dir }}/quay-storage/local:/datastorage"
          - "/home/thomasmckay/code/quay-devel:/home/thomasmckay/code/quay-devel"
        env:
          QUAYENTRY: config
          CONFIG_APP_PASSWORD: password
        ports:
          - "9080:8080"
          - "9443:8443"
        etc_hosts:
          thomasmckay.usersys.redhat.com: 192.168.1.119
          thomasmckay-desktop.usersys.redhat.com: 192.168.1.2
        keep_volumes: true
        auto_remove: true
        state: started
        restart: true
      register: result
      until: result is succeeded
      retries: 5
      delay: 10

    - name: "Open browser: Quay Config"
      tags: [start-setup]
      command: "xdg-open https://{{ quay_host }}:9443"

    - name: Install config
      tags: [finish-setup]
      shell:
        cmd: |
          mv {{ downloads_dir }}/quay-config.tar.gz {{ volumes_dir }}/quay-config/quay-config.tar.gz
          tar xvf {{ volumes_dir }}/quay-config/quay-config.tar.gz -C {{ volumes_dir }}/quay-config
          mv {{ downloads_dir }}/security_scanner.pem {{ volumes_dir }}/quay-config

    - name: Allow Swagger to query API
      tags: [finish-setup]
      lineinfile:
        path: "{{ volumes_dir }}/quay-config/config.yaml"
        regexp: "^BROWSER_API_CALLS_XHR_ONLY:"
        line: "BROWSER_API_CALLS_XHR_ONLY: false"

    - name: Pull latest image
      tags: [pull-latest, repull-quay]
      shell:
        cmd: |
          docker pull {{ quay_image }}

    - name: Quay Registry container
      tags: [finish-setup, restart-quay, restart-all]
      docker_container:
        name: quay
        image:  "{{ quay_image }}"
        volumes:
          - "{{ volumes_dir }}/quay-config:/conf/stack"
          - "{{ volumes_dir }}/quay-storage/local:/datastorage"
          - "/home/thomasmckay/code/quay-devel:/home/thomasmckay/code/quay-devel"
        env:
          QUAYENTRY: registry
          DEBUGLOG: "true"
          QUAY_OVERRIDE_SERVICES: "repomirrorworker=true"
        ports:
          - "{{ quay_http_port }}:8080"
          - "{{ quay_https_port }}:8443"
          - "9091:9091"
          - "9092:9092"
          - "1234:1234"
          - "2345:2345"
          - "2346:2346"
        etc_hosts:
          thomasmckay.usersys.redhat.com: 192.168.1.119
          thomasmckay-desktop.usersys.redhat.com: 192.168.1.2
        network_mode: host
        keep_volumes: true
        auto_remove: true
        state: started
        restart: true
      register: result
      until: result is succeeded
      retries: 5
      delay: 10

    - name: Quay Mirror container
      tags: [restart-mirror]
      docker_container:
        name: quay-mirror
        image: "{{ quay_image }}"
        volumes:
          - "{{ volumes_dir }}/quay-config:/conf/stack"
          - "{{ volumes_dir }}/quay-storage/local:/datastorage"
          - "/home/thomasmckay/code/quay:/home/thomasmckay/code/quay"
        env:
          QUAYENTRY: repomirror
          QUAY_OVERRIDE_SERVICES: prometheus-aggregator=true
        ports:
          - "9980:8080"
          - "9943:8443"
        etc_hosts:
          thomasmckay.usersys.redhat.com: 192.168.1.119
          thomasmckay-desktop.usersys.redhat.com: 192.168.1.2
        keep_volumes: true
        auto_remove: true
        state: started
        restart: true
      register: result
      until: result is succeeded
      retries: 5
      delay: 10

    - name: Determine security_scanner key ID
      tags: [finish-setup, redeploy-clair]
      shell:
        cmd: |
          docker exec quay-postgresql bash -l -c 'echo "select kid,service from servicekey;" | psql quay' | grep security_scanner | awk '{print $1}'
      register: key_id

    - name: Put security_scanner.pem in place
      tags: [finish-setup, redeploy-clair]
      shell:
        cmd: |
          cp {{ volumes_dir }}/quay-config/security_scanner.pem {{ volumes_dir }}/clair-config/

    - name: Create clair.yaml
      tags: [finish-setup, redeploy-clair]
      vars:
        quay_endpoint: "{{ quay_host }}:8443"
        clair_endpoint: "{{ quay_host }}"
      shell:
        cmd: |
          cp {{ volumes_dir }}/certs/rootCA.crt {{ volumes_dir }}/clair-certs/rootCA.crt
          cp {{ volumes_dir }}/quay-config/security_scanner.pem {{ volumes_dir }}/clair-config/security_scanner.pem
          cp {{ volumes_dir }}/certs/clair.crt {{ volumes_dir }}/clair-config
          cp {{ volumes_dir }}/certs/clair.key {{ volumes_dir }}/clair-config
          cat <<EOF > {{ volumes_dir }}/clair-config/config.yaml
          clair:
            database:
              type: pgsql
              options:
                source: postgresql://quay:quay@{{ clair_endpoint }}:5432/clair?sslmode=disable
                cachesize: 16384
            api:
              healthport: 6061
              port: 6062
              timeout: 900s
              paginationkey: "XxoPtCUzrUv4JV5dS+yQ+MdW7yLEJnRMwigVY/bpgtQ="
            updater:
              interval: 6h
              enabledupdaters:
              - rhel
              - alpine
            notifier:
              attempts: 3
              renotifyinterval: 1m
              http:
                endpoint: https://{{ quay_endpoint }}/secscan/notify
                proxy: http://localhost:6063
          jwtproxy:
            signer_proxy:
              enabled: true
              listen_addr: :6063
              ca_key_file: /certificates/mitm.key
              ca_crt_file: /certificates/mitm.crt
              signer:
                issuer: security_scanner
                expiration_time: 5m
                max_skew: 1m
                nonce_length: 32
                private_key:
                  type: preshared
                  options:
                    key_id: {{ key_id.stdout }}
                    private_key_path: /clair/config/security_scanner.pem
            verifier_proxies:
            - enabled: true
              listen_addr: :6060
              key_file: /clair/config/clair.key
              crt_file: /clair/config/clair.crt
              verifier:
                audience: https://{{ clair_endpoint }}:6060
                upstream: http://localhost:6062
                key_server:
                  type: keyregistry
                  options:
                    registry: https://{{ quay_endpoint }}/keys/
          EOF

    - name: Pull latest image
      tags: [finish-setup, repull-clair]
      shell:
        cmd: |
          docker pull {{ clair_image }}

    - name: Drop Postgresql 'clair' database
      tags: [finish-setup, redeploy-clair]
      shell:
        cmd: |
          docker exec quay-postgresql bash -l -c 'dropdb clair'
      register: result
      ignore_errors: yes

    - name: Postgresql 'clair' database
      tags: [finish-setup, redeploy-clair]
      shell:
        cmd: |
          docker exec quay-postgresql bash -l -c 'createdb clair'
      register: result
      ignore_errors: yes

    - name: Clair container
      tags: [finish-setup, restart-clair, restart-clair, redeploy-clair, restart-all]
      docker_container:
        name: clair
        image: "{{ clair_image }}"
        volumes:
          - "{{ volumes_dir }}/clair-config:/clair/config:Z"
          - "{{ volumes_dir }}/certs/rootCA.crt:/etc/pki/ca-trust/source/anchors/rootCA.crt"
          # - {{ volumes_dir }}/certs/clair.cert:/etc/pki/ca-trust/source/anchors/clair.crt
          # - {{ volumes_dir }}/certs/rootCA.pem:/etc/pki/ca-trust/source/anchors/ca.crt
          #- {{ volumes_dir }}/clair-config/config.yaml:/config/config.yaml
          #- {{ volumes_dir }}/clair-config:/clair/config:Z
          # - {{ volumes_dir }}/certs/clair.cert:/usr/local/share/ca-certificates/ca.crt
        ports:
          - "6060:6060"
          - "6061:6061"
          - "6062:6062"
        etc_hosts:
          thomasmckay.usersys.redhat.com: 192.168.1.119
          thomasmckay-desktop.usersys.redhat.com: 192.168.1.2
        network_mode: host
        keep_volumes: true
        auto_remove: true
        state: started
        restart: true
      register: result
      until: result is succeeded
      retries: 5
      delay: 10

    - name: Swagger container
      tags: [finish-setup, restart-all, restart-swagger]
      docker_container:
        name: swagger
        image:  swaggerapi/swagger-ui
        env:
          API_URL: "https://{{ quay_host }}:{{ quay_https_port }}/api/v1/discovery"
        ports:
          - "8888:8080"
        #network_mode: host
        auto_remove: true
        state: started
        restart: true
      register: result
      until: result is succeeded
      retries: 5
      delay: 10

    - name: "Open browser: Quay"
      tags: [finish-setup]
      command: "xdg-open https://{{ quay_host }}:8443"

    - name: "Open browser: Swagger"
      tags: [finish-setup]
      command: "xdg-open http://{{ quay_host }}:8888/#/mirror/changeRepoMirrorConfig"

    - name: "Open browser: Grafana"
      tags: [finish-setup]
      command: "xdg-open http://{{ quay_host }}:8666"

    - name: "Open browser: MinIO"
      tags: [finish-setup]
      command: "xdg-open http://{{ quay_host }}:9000"

